#!/bin/bash
#
# Copyright (c) 2017-present, Facebook, Inc.
# All rights reserved.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

set -e

function show_help() {
  cat<<EOF
Usage: $0 [OPTIONS] (YYYY.MM.DD|existing-tag) MAJOR.MINOR"
Options:
  --help
      Show this page
  --previous=PREV_MAJOR.PREV_MINOR
      (default: MAJOR.(MINOR - 1))
      Manually specify the previous release. Useful when a release has been
      skipped.
  --dry-run
      Only show the versions that would be used, don't actually do anything.
  --force
      Skip safety checks:
      - allow uncommitted changes to this repository
      - do not require that the local checkout is in sync with upstream
EOF
}

if [ "$#" == "0" ]; then
  show_help;
  exit 1;
fi

FORCE=false
DRY_RUN=false
POSITIONAL_ARGUMENTS=()
while (($#)); do
  case "$1" in
    --help)
      show_help
      exit
      ;;
    --force)
      FORCE=true
      shift
      ;;
    --dry-run)
      DRY_RUN=true
      shift
      ;;
    --previous)
      shift
      if ! (($#)); then
        echo "'--previous' requires a value."
        show_help
        exit 1
      fi
      PREVIOUS_VERSION="$1"
      shift
      ;;
    --previous=*)
      PREVIOUS_VERSION="${1#--previous=}"
      if [ -z "${PREVIOUS_VERSION}" ]; then
        echo "'--previous' requires a value."
        show_help
        exit 1
      fi
      shift
      ;;
    --)
      shift
      POSITIONAL_ARGUMENTS=("${POSITIONAL_ARGUMENTS[@]}" "$@")
      break
      ;;
    --*)
      echo "Unrecognized option: $1"
      show_help
      exit 1
      ;;
    *)
      POSITIONAL_ARGUMENTS+=("$1")
      shift
      ;;
  esac
done

if [ "${#POSITIONAL_ARGUMENTS[@]}" != "2" ]; then
  echo "Expected two arguments, got ${#POSITIONAL_ARGUMENTS[@]}:"
  echo "  ${POSITIONAL_ARGUMENTS[*]}"
  show_help
  exit 1
fi

NIGHTLY="${POSITIONAL_ARGUMENTS[0]}"
VERSION="${POSITIONAL_ARGUMENTS[1]}"

if [ -z "$NIGHTLY" ] || [ -z "$VERSION" ]; then
  echo "Missing nightly $NIGHTLY or version $VERSION"
  show_help
  exit 1
fi

function check_version() {
  local VERSION="$1"
  if ! echo "$VERSION" | grep -q -e '^[0-9]\+\.[0-9]\+$'; then
    echo "Only specify MAJOR.MINOR version, not MAJOR.MINOR.RELEASE"
    exit 1
  fi
}

check_version "$VERSION"

if [ -z "${PREVIOUS_VERSION}" ]; then
  MAJOR=$(echo "$VERSION" | cut -f1 -d.)
  MINOR=$(echo "$VERSION" | cut -f2 -d.)
  PREVIOUS_VERSION="${PREVIOUS_VERSION:-"${MAJOR}.$((MINOR-1))"}"
fi
check_version "$PREVIOUS_VERSION"

if [ "$#" -gt 2 ]; then
  echo "Options must come before positional arguments."
  show_help
  exit 1
fi

cat <<EOF
----------------
--- Versions ---
----------------
Nightly build:
  ${NIGHTLY}
Previous version:
  ${PREVIOUS_VERSION}
Tagging version:
  ${VERSION}
----------------
EOF

if $FORCE; then
  FORCEABLE='[WARNING - FORCED]'
else
  FORCEABLE='[FORCEABLE ERROR]'
fi

PKGDIR="$(pwd)"
if [ ! -e "$PKGDIR/bin/$(basename "$0")" ]; then
  echo "This script must be ran from the root of the packaging repository."
  exit 1
fi

if [ "$(<.git/HEAD)" != "ref: refs/heads/master" ]; then
  echo "${FORCEABLE} Run from master branch."
  $FORCE || exit 1
fi
if ! git diff --exit-code >/dev/null; then
  echo "${FORCEABLE} Uncommitted changes."
  $FORCE || exit 1
fi

REQUIRED_GIT_ORIGIN="git@github.com:hhvm/packaging.git"
GIT_ORIGIN="$(git remote get-url --push origin)"

if [ "$GIT_ORIGIN" != "$REQUIRED_GIT_ORIGIN" ]; then
  echo "${FORCEABLE} Git origin push URL is unsupported:"
  echo "  - Current value: ${GIT_ORIGIN}"
  echo "  - Required value: ${REQUIRED_GIT_ORIGIN}"
  echo "  - Fix: git remote set-url --push origin ${REQUIRED_GIT_ORIGIN}"
  $FORCE || exit 1
fi

if $DRY_RUN; then
  echo "Dry run - exiting."
  exit 0
fi


echo "Fetching any updates to packaging repo..."
git fetch >/dev/null
if ! git diff --exit-code origin/master..HEAD >/dev/null; then
  echo "${FORCEABLE} Current branch is out of sync with origin/master"
  $FORCE || exit 1
fi

SED=$(if [ "$(uname -s)" == "Darwin" ]; then echo gsed; else echo sed; fi)

if ! command -v "$SED" >/dev/null; then
  echo "'$SED' is required."
  if [ "$SED" == "gsed" ]; then
    echo "Try: brew install gnu-sed"
  fi
  exit 1
fi

function statusline() {
  # green background, back foreground
  tput setab 2
  tput setaf 0
  echo "$@"
  # reset
  tput sgr0
}

statusline "Creating packaging branch..."
git checkout -B "HHVM-${VERSION}"
statusline "Marking support for new DISTRO apt repo.."
echo "DISTRO-${VERSION}" >> DEBIAN_REPOSITORIES
git commit DEBIAN_REPOSITORIES -m "Adding DISTRO-${VERSION} apt repositories"
statusline "Pushing packaging branch..."
git rebase master
git pull --rebase origin "HHVM-${VERSION}"
git push -u origin "HEAD:HHVM-${VERSION}"

SCRATCHDIR="$(mktemp -dt hhvm.XXXXXXXX)"
statusline "Working in ${SCRATCHDIR}..."

cd "$SCRATCHDIR"

if [ "$NIGHTLY" = "existing-tag" ]; then
  statusline "Not cloning HHVM, already tagged."
else
  statusline "Cloning hhvm..."
  git clone git@github.com:hhvm/hhvm-staging.git "hhvm-${VERSION}"
  (
    statusline "Tagging and pushing HHVM..."
    cd "hhvm-$VERSION"
    git remote add staging git@github.com:hhvm/hhvm-staging.git
    git checkout -b "HHVM-${VERSION}"
    git reset --hard "nightly-${NIGHTLY}"
    "$PKGDIR/bin/hhvm-tag-and-push" "${VERSION}.0"
  )
fi

statusline "Cloning hhvm-docker..."
git clone git@github.com:hhvm/hhvm-docker.git
(
  cd hhvm-docker
  statusline "Removing 'latest' from previous release branch tags..."
  git checkout "HHVM-${PREVIOUS_VERSION}"
  $SED -i '/^latest$/d' EXTRA_TAGS
  git commit EXTRA_TAGS -m "Removing 'latest' tag"
  git push
  statusline "Creating branch for new release..."
  git checkout master
  git checkout -b "HHVM-$VERSION"
  echo latest > EXTRA_TAGS
  echo "${VERSION}-latest" >> EXTRA_TAGS
  git commit EXTRA_TAGS -m "Update tags for ${VERSION} release"
  git push -u origin "HEAD:HHVM-${VERSION}"
)

statusline "Triggering Linux builds..."
"$PKGDIR/bin/build-on-aws" "${VERSION}.0"

statusline "Cleaning up..."
rm -rf "${SCRATCHDIR}"
